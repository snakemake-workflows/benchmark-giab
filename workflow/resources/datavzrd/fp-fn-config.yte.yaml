__use_yte__: true

__definitions__:
  - import os
  - import pandas as pd
  - |
    columns = pd.read_table(input.main_dataset, sep="\t", nrows=1).columns
    genotype_columns = list(columns[5:])

name: ?f"{wildcards.classification.upper()} calls at loci with {wildcards.cov} coverage on genome {wildcards.genome} for all callsets."
default-view: main

webview-controls: true

datasets:
  main:
    path: ?input.main_dataset
    separator: "\t"
    headers: ?len(params.labels) + 1
  ?for label in params.labels:
    ?label:
      path: ?os.path.join(input.dependency_sorting_datasets, f"{label}.tsv")
      separator: "\t"
      headers: 2
  

views:
  ?for view in ["main"] + params.labels:
    __variables__:
      labels: ?params.labels if view == "main" else [view]
    ?view if view == "main" else f"by {view}":
      ?if view == "main":
        desc: |
          ?f"""
          The values 0/0, 0/1, and 1/1 represent the genotype (not present, heterozygous, homozygous).
          If a callset does not have an entry, this means that the variant matches the truth.

          Rows and columns are sorted according to an unsupervised hiearchical clustering with hamming distance and ward linkage.

          Benchmark version: {wildcards.genome} {params.version}
          """
      ?else:
        desc: |
          ?f"""
          Rows are sorted by their statistical dependency on {view}, which is determined by a 
          [ChiÂ² test](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.chi2.html).
          The corresponding p-value and Benjamini-Hochberg corrected FDR is shown in the last two columns.
          They represent the probability to observe an at least as strong dependency by chance.
          Rows with highest dependency are shown first.

          The values 0/0, 0/1, and 1/1 represent the genotype (not present, heterozygous, homozygous).
          If a callset does not have an entry, this means that the variant matches the truth.

          Benchmark version: {wildcards.genome} {params.version}
          """
      dataset: ?view
      page-size: 12
      render-table:
        headers:
          ?for i, label in enumerate(labels):
            ?i + 1:
              label: ?label
              ellipsis: 4
              plot:
                heatmap:
                  scale: ordinal
                  color-scheme: category20
        columns:
          true_genotype:
            plot:
              heatmap:
                scale: ordinal
                domain:
                  - "0/0"
                  - "0/1"
                  - "1/1"
                range:
                  - "#fdae6b"
                  - "#c6dbef"
                  - "#6baed6"
          p-value dependency:
            plot:
              ticks:
                scale: linear
            optional: true
          FDR dependency:
            plot:
              ticks:
                scale: linear
            optional: true
          ?for callset in genotype_columns:
            ?callset:
              plot:
                ?if wildcards.classification == "fp":
                  heatmap:
                    scale: ordinal
                    domain:
                      - "0/0"
                      - "0/1"
                      - "1/1"
                    range:
                      - "#fdae6b"
                      - "#c6dbef"
                      - "#6baed6"
                ?else:
                  heatmap:
                    scale: ordinal
                    domain:
                      - FN
                    range:
                      - "#6baed6"